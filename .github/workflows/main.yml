name: CI/CD
on:
  push:
    branches: [tucomanda_dev]
  pull_request:
    branches: [tucomanda_dev]
jobs:
  Start:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Check if version has been updated
      id: check
      uses: EndBug/version-check@v1
      with:
        token: ${{ github.token }}
    - name: Log when changed
      if: steps.check.outputs.changed == 'true'
      run: 'echo "Version change found in commit ${{ steps.check.outputs.commit }}! New version: ${{ steps.check.outputs.version }} (${{ steps.check.outputs.type }})"'
    - name: Log when unchanged
      if: steps.check.outputs.changed == 'false'
      run: 'echo "No version change :/"'

  Avoid_Redundancy:
    runs-on: ubuntu-latest
    steps:
    - name: Cancel previous redundant builds
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

  Lint:
    needs: [Start]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: '14.18.1'
    - name: Install dependencies
      run: npm ci
    - name: Lint
      run: npm run eslint

  Build:
    needs: [Start]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: '14.18.1'
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build
    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

  UnitTest:
    needs: [Lint, Build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: '14.18.1'
    - name: Install dependencies
      run: npm ci
    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - name: unitTest
      run: npm run test

  Coverage:
    needs: [UnitTest]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with: 
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: '14.18.1'
    - name: Install dependencies
      run: npm ci
    - name: unitTest
      run: npm run test:coverage
    - name: Check test coverage
      id: test-coverage
      uses: johanvanhelden/gha-clover-test-coverage-check@v1
      with:
        percentage: "90"
        filename: "./coverage/clover.xml"

  # Deploy:
  #   needs: [Coverage]
  #   if: ${{ github.event_name == 'push' }}
  #   runs-on: ubuntu-latest
  #   steps:    
  #   - uses: actions/checkout@v3
  #     with: 
  #       fetch-depth: 0
  #   - name: Update SHA
  #     run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/app/_meta
  #   - name: Build image
  #     run: docker build -t registry.digitalocean.com/tucomandaqa/tc-products-ms:$(echo $GITHUB_SHA | head -c7) .
  #   - name: Install doctl
  #     uses: digitalocean/action-doctl@v2
  #     with:
  #       token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #   - name: Log in Container Registry
  #     run: doctl registry login --expiry-seconds 600
  #   - name: Push image
  #     run: docker push registry.digitalocean.com/tucomandaqa/tc-products-ms:$(echo $GITHUB_SHA | head -c7)
  #   - name: Update deployment file
  #     run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/tucomandaqa/tc-products-ms:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml
  #   - name: Save config cluster
  #     run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 tucomandaqa
  #   - name: Deploy Kubernetes
  #     run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml
  #   - name: Verify deployment
  #     run: kubectl rollout status deployment/tc-products-ms -n microservices